package test;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author leonardo
 */
public class View extends javax.swing.JFrame implements MouseMotionListener {
    
    private BufferedImage bi;
    private BufferedImage frameBuffer;
    
    private BufferedImage front;
    private BufferedImage mask;
    
    private Point mousePoint = new Point();
    
    private Vec2View normal = new Vec2View(Color.BLUE);
    private Vec2View vel = new Vec2View(Color.RED);
    
    private Ball ball;
    
    /**
     * Creates new form View
     */
    public View() {
        initComponents();
        setLocationRelativeTo(null);
        addMouseMotionListener(this);
        
        ball = new Ball(this);
        bi = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);
        frameBuffer = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_ARGB);
        
        try {
            front = ImageIO.read(getClass().getResource("background.png"));
            mask = ImageIO.read(getClass().getResource("ogpna.png"));
        } catch (IOException ex) {
            Logger.getLogger(View.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(-1);
        }

        // somente uma vez
        drawFrameBuffer((Graphics2D) frameBuffer.getGraphics());
        
        Timer timer = new Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                update();
                repaint();
            }
        }, 100, 5);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 388, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 560, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public boolean checkCollisionBallTable(int x, int y) {
        int red = 0;
        try {
            int c = frameBuffer.getRGB(x, y);
            red = (c >> 16) & 0xFF;
        }
        catch (Exception e) { 
            return false;
        }
        return red != 255;
    }
    
    @Override
    public void paint(Graphics g) {
        draw(bi.getGraphics());
        g.drawImage(bi, 0, 0, null);
    }

    public void draw(Graphics g) {
        //g.drawImage(frameBuffer, 0, 0, null);
        g.clearRect(0, 0, getWidth(), getHeight());
        
        ((Graphics2D) g).scale(2, 2);
        g.drawImage(front, 20, 20, null);
        ((Graphics2D) g).scale(0.5, 0.5);
        
        
        g.setColor(Color.RED);
        g.drawOval(mousePoint.x - 3, mousePoint.y - 3, 6, 6);

        ball.draw((Graphics2D) g);

        // calcula e desenha a normal
        if (calculateNormal((int) ball.position.x, (int) ball.position.y) != null) {
            normal.multiply(50);
            //normal.draw((Graphics2D) g, (int) ball.position.x, (int) ball.position.y);
        }

        vel.set(ball.velocity.x, ball.velocity.y);
        vel.multiply(20);
        //vel.draw((Graphics2D) g, (int) ball.position.x, (int) ball.position.y);
        
        //((Graphics2D) g).scale(2, 2);
        //((Graphics2D) g).setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.8f));
        //g.drawImage(front, 20, 20, null);
        //((Graphics2D) g).scale(0.5, 0.5);
        
    }
    
    public Vec2 calculateNormal(int x, int y) {
        int angle = 0;
        try {
            int c = frameBuffer.getRGB(x, y);
            int red = (c >> 16) & 0xFF;
            int green = (c >> 8) & 0xFF;
            int blue = (c >> 0) & 0xFF;
            angle = red;
            //System.out.println(red + " " + green + " " + blue);
        }
        catch (Exception e) { }

        if (angle == 255) {
            return null;
        }

        normal.set(0, -50);
        double a = (2 * Math.PI) * (angle / 255d);
        normal.rotate(-a);
        normal.normalize();
        
        return normal;
    }
    
    public void drawFrameBuffer(Graphics2D g) {
        g.clearRect(0, 0, frameBuffer.getWidth(), frameBuffer.getHeight());
        g.scale(2, 2);
        g.drawImage(mask, 20, 20, null);
        
        //g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.8f));
        //g.drawImage(front, 20, 20, null);
    }

    @Override
    public void mouseDragged(MouseEvent e) {
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        mousePoint.setLocation(e.getX(), e.getY());
        //System.out.println(mousePoint);
        repaint();
    }

    public void update() {
        ball.update();
    }

    private boolean[] pressed = new boolean[255];
    
    @Override
    protected void processKeyEvent(KeyEvent e) {
        if (e.getKeyCode() == 37 && e.getID() == KeyEvent.KEY_PRESSED && !pressed[e.getKeyCode()]) {
            pressed[e.getKeyCode()] = true;
            ball.velocity.y = -ball.velocity.y;
            ball.setVelocity(-2, -5);
        }
        else if (e.getKeyCode() == 39 && e.getID() == KeyEvent.KEY_PRESSED && !pressed[e.getKeyCode()]) {
            pressed[e.getKeyCode()] = true;
            ball.velocity.y = -ball.velocity.y;
            ball.setVelocity(2, -5);
        }
        
        if (e.getID() == KeyEvent.KEY_RELEASED) { 
            pressed[e.getKeyCode()] = false;
        }
    }

}
